{"version":3,"file":"static/js/760.a4662c7a.chunk.js","mappings":"4MACA,EAA8B,kCAA9B,EAAqF,yCAArF,EAAoJ,0C,8BCIvIA,EAAe,WAAO,IAAD,IAChC,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAAkCN,EAAAA,EAAAA,UAAS,IAA3C,sBAAOO,OAAP,SAAsBC,EAAtB,KACA,GAA8CC,EAAAA,EAAAA,MAA9C,eAAOC,EAAP,YAAsBC,EAAtB,EAAsBA,QAASC,EAA/B,EAA+BA,UAezBC,EAAoB,SAAAC,GACxB,MAAwBA,EAAMC,cAAtBd,EAAR,EAAQA,KAAMe,EAAd,EAAcA,MAEd,OAAQf,GACN,IAAK,OACHgB,QAAQC,IAAIjB,EAAMe,GAClBd,EAAQc,GACR,MACF,IAAK,QACHC,QAAQC,IAAIjB,EAAMe,GAClBZ,EAASY,GACT,MACF,IAAK,WACHC,QAAQC,IAAIjB,EAAMe,GAClBV,EAAYU,KAKZG,EAAY,mCAAG,WAAML,GAAN,gFACnBA,EAAMM,iBACAC,EAAO,CAAEpB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,GAFT,SAGKK,EAAYW,GAHjB,QAGbC,EAHa,QAITf,OAASC,EAASc,EAAUf,OACtCgB,IALmB,2CAAH,sDAQZA,EAAQ,WACZrB,EAAQ,IACRE,EAAS,IACTE,EAAY,KAGd,OACE,iCACE,kBAAMkB,SAAUL,EAAcM,UAAWC,EAAzC,WACE,mBAAOD,UAAWC,EAAlB,WACE,oCACA,kBACEC,KAAK,OACL1B,KAAK,OACLe,MAAOf,EACP2B,SAAUf,QAGd,mBAAOY,UAAWC,EAAlB,WACE,qCACA,kBACEC,KAAK,QACL1B,KAAK,QACLe,MAAOb,EACPyB,SAAUf,QAGd,mBAAOY,UAAWC,EAAlB,WACE,wCACA,kBACEC,KAAK,WACL1B,KAAK,WACLe,MAAOX,EACPuB,SAAUf,QAGd,mBAAQc,KAAK,SAASF,UAAWC,EAAjC,yBAIDd,IACC,cAAGiB,MAAO,CAAEC,WAAW,SAAWC,SAAU,IAA5C,sCAIDpB,IACC,cAAGkB,MAAO,CAAEC,WAAW,SAAWC,SAAU,IAA5C,2CAII,OAALxB,QAAK,IAALA,GAAA,UAAAA,EAAOyB,YAAP,eAAaC,YACZ,cAAGJ,MAAO,CAAEC,WAAW,SAAWC,SAAU,IAA5C,gDAII,OAALxB,QAAK,IAALA,GAAA,UAAAA,EAAOyB,YAAP,eAAaE,WACZ,cAAGL,MAAO,CAAEC,WAAW,SAAWC,SAAU,IAA5C,SACGxB,EAAMyB,KAAKE,cCvGtB,EAJqB,WACnB,OAAO,SAACnC,EAAD","sources":["webpack://react-homework/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"RegisterForm_contactForm__SL4S4\",\"contactForm__label\":\"RegisterForm_contactForm__label__S8iW7\",\"contactForm__button\":\"RegisterForm_contactForm__button__xTf1Z\"};","import css from './RegisterForm.module.css';\n\nimport { useState } from 'react';\nimport { useRegisterRTKMutation } from 'redux/RTKAuthApi/AuthApi';\n\nexport const RegisterForm = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error = false, setError] = useState('');\n  const [registerRTK, { isError, isSuccess }] = useRegisterRTKMutation();\n\n  // if (isSuccess) {\n  //   console.log('register completed', isSuccess);\n  // }\n  // if (isError) {\n  //   console.log('register not completed', isError);\n  // }\n  // if (error?.data?.keyValue) {\n  //   console.log(`error email already exist`, error.data.keyValue.email);\n  // }\n  // if (error?.data?.message) {\n  //   console.log(`error password`, error.data.message);\n  // }\n\n  const handleImputChange = event => {\n    const { name, value } = event.currentTarget;\n    // eslint-disable-next-line default-case\n    switch (name) {\n      case 'name':\n        console.log(name, value);\n        setName(value);\n        break;\n      case 'email':\n        console.log(name, value);\n        setEmail(value);\n        break;\n      case 'password':\n        console.log(name, value);\n        setPassword(value);\n        break;\n    }\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const user = { name, email, password };\n    const resposnce = await registerRTK(user);\n    resposnce.error && setError(resposnce.error);\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={css.contactForm}>\n        <label className={css.contactForm__label}>\n          <span>name</span>\n          <input\n            type=\"name\"\n            name=\"name\"\n            value={name}\n            onChange={handleImputChange}\n          />\n        </label>\n        <label className={css.contactForm__label}>\n          <span>email</span>\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleImputChange}\n          />\n        </label>\n        <label className={css.contactForm__label}>\n          <span>password</span>\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={handleImputChange}\n          />\n        </label>\n        <button type=\"submit\" className={css.contactForm__button}>\n          Register\n        </button>\n      </form>\n      {isSuccess && (\n        <p style={{ fontFamily: `Roboto`, fontSize: 24 }}>\n          Registration succeess :)\n        </p>\n      )}\n      {isError && (\n        <p style={{ fontFamily: `Roboto`, fontSize: 24 }}>\n          Registration not succeess :(\n        </p>\n      )}\n      {error?.data?.keyValue && (\n        <p style={{ fontFamily: `Roboto`, fontSize: 24 }}>\n          this email is already registed :(\n        </p>\n      )}\n      {error?.data?.message && (\n        <p style={{ fontFamily: `Roboto`, fontSize: 24 }}>\n          {error.data.message}\n        </p>\n      )}\n    </>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n"],"names":["RegisterForm","useState","name","setName","email","setEmail","password","setPassword","error","setError","useRegisterRTKMutation","registerRTK","isError","isSuccess","handleImputChange","event","currentTarget","value","console","log","handleSubmit","preventDefault","user","resposnce","reset","onSubmit","className","css","type","onChange","style","fontFamily","fontSize","data","keyValue","message"],"sourceRoot":""}